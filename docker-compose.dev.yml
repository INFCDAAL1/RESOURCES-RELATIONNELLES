services:
  rr-front-dev:
    image: ghcr.io/infcdaal1/rr-vue:dev
    container_name: rr-front-dev
    restart: unless-stopped
    labels:
      - "traefik.enable=true"  # Activer Traefik pour ce service
      - "traefik.http.routers.front.rule=Host(`rr-dev.qalpuch.cc`)"  # Règle de routage pour le service front
      - "traefik.http.routers.front.entrypoints=websecure"  # Utiliser le point d'entrée HTTPS
      - "traefik.http.routers.front.tls.certresolver=cloudflare"  # Utiliser le résolveur de certificats Cloudflare
      - "traefik.http.services.front.loadbalancer.server.port=80"
    depends_on:
      rr-api-dev:
        required: true
        condition: service_healthy
    networks:
      - traefik  # Utiliser le réseau Traefik pour la communication entre les services

  rr-api-dev:
    image: ghcr.io/infcdaal1/rr:dev
    container_name: rr-api-dev
    restart: unless-stopped
    labels:
      - "traefik.enable=true"  # Activer Traefik pour ce service
      - "traefik.http.routers.api.rule=Host(`rr-api-dev.qalpuch.cc`)"  # Règle de routage pour le service API
      - "traefik.http.routers.api.entrypoints=websecure"  # Utiliser le point d'entrée HTTPS
      - "traefik.http.routers.api.tls.certresolver=cloudflare"  # Utiliser le résolveur de certificats Cloudflare
      - "traefik.http.services.api.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik"  # Spécifier le réseau Traefik pour ce service
    environment:
      DB_HOST: rr-db-dev
      DB_PORT: '${DB_PORT}'
      DB_DATABASE: '${DB_DATABASE}'
      DB_USERNAME: '${DB_USERNAME}'
      DB_PASSWORD: '${DB_PASSWORD}'
    env_file:
      - .env.dev
    depends_on:
      rr-db-dev:
        required: true
        condition: service_healthy
    networks:
      - traefik  # Utiliser le réseau Traefik pour la communication entre les services
      - rr-db-dev # Utiliser le réseau de la base de données pour la communication
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80/up || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 15

  rr-db-dev:
    image: 'mariadb:11'
    container_name: rr-db-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_HOST: '0.0.0.0'
      MYSQL_PORT: '${DB_PORT}'
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
    volumes:
      - 'rr_db_dev:/var/lib/mysql'
    networks:
      - rr-db-dev
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized" ]
      start_period: 1m
      start_interval: 10s
      interval: 1m
      timeout: 5s
      retries: 3
volumes:
  rr_db_dev:
    driver: local

networks:
  rr-db-dev:
    name: rr-db-dev
  traefik:
    external: true
